# Render from the left eye camera
bpy.context.scene.camera = camera_left_obj
bpy.context.scene.render.filepath = '/tmp/left_eye' bpy.ops.render.render(write_still=True)

# Render from the right eye camera
bpy.context.scene.camera = camera_right_obj
bpy.context.scene.render.filepath = '/tmp/right_eye' bpy.ops.render.render(write_still=True)

# Compositing
bpy.context.scene.use_nodes = True
tree = bpy.context.scene.node_tree

# Clear default nodes
for node in tree.nodes: tree.nodes.remove(node)

# Add nodes
left_img_node = tree.nodes.new('CompositorNodeImage')
left_img_node.image = bpy.data.images.load('/tmp/left_eye.png')

right_img_node = tree.nodes.new('CompositorNodeImage')
right_img_node.image = bpy.data.images.load('/tmp/right_eye.png')

translate_left = tree.nodes.new('CompositorNodeTranslate')
translate_left.inputs[1].default_value = -10 # Adjust offset as needed

translate_right = tree.nodes.new('CompositorNodeTranslate')
translate_right.inputs[1].default_value = 10 # Adjust offset as needed

mix_node = tree.nodes.new('CompositorNodeMixRGB')
mix_node.blend_type = 'MIX' mix_node.inputs[0].default_value = 0.5

# Set transparency
output_node = tree.nodes.new('CompositorNodeComposite')

# Link nodes
tree.links.new(left_img_node.outputs[0], translate_left.inputs[0])
tree.links.new(right_img_node.outputs[0], translate_right.inputs[0])
tree.links.new(translate_left.outputs[0], mix_node.inputs[1])
tree.links.new(translate_right.outputs[0], mix_node.inputs[2])
tree.links.new(mix_node.outputs[0], output_node.inputs[0])  
